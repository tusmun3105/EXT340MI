{"programModules":{"EXT340MI":{"program":"EXT340MI","triggers":{},"transactions":{"LstSupplSummary":{"sourceUuid":"40546a51-f21b-41dc-8029-58dc97c3458e","name":"LstSupplSummary","program":"EXT340MI","description":"Lst suppl summary","active":true,"multi":true,"modified":1731658996456,"modifiedBy":"KMOTEAN","outputFields":[{"name":"CUNO","description":"customer","length":10,"mandatory":false,"type":"A"},{"name":"POP4","description":"Référence normalisée de l’article ","length":15,"mandatory":false,"type":"A"},{"name":"POP5","description":"Référence non normalisée de l’article ","length":15,"mandatory":false,"type":"A"},{"name":"CFI1","description":"Code marque (ACR ou partenaire) ","length":10,"mandatory":false,"type":"A"},{"name":"ITNO","description":"item number","length":15,"mandatory":false,"type":"A"},{"name":"ORQA","description":"ordered quantity - alternate U/M","length":15,"mandatory":false,"type":"N"},{"name":"ORTP","description":"customer order type","length":3,"mandatory":false,"type":"A"},{"name":"SPLM","description":"supply model","length":8,"mandatory":false,"type":"A"},{"name":"WHLO","description":"warehouse","length":3,"mandatory":false,"type":"A"},{"name":"AV01","description":"Quantité disponible en stock ","length":15,"mandatory":false,"type":"N"},{"name":"WHNM","description":"description","length":36,"mandatory":false,"type":"A"},{"name":"TOMU","description":"issue multiple","length":15,"mandatory":false,"type":"N"},{"name":"PADL","description":"partial delivery","length":1,"mandatory":false,"type":"N"},{"name":"BCKO","description":"backorder","length":1,"mandatory":false,"type":"N"},{"name":"ROUT","description":"route","length":6,"mandatory":false,"type":"A"},{"name":"TX40","description":"description","length":40,"mandatory":false,"type":"A"},{"name":"CODZ","description":"confirmed delivery date","length":8,"mandatory":false,"type":"N"},{"name":"COHZ","description":"confirmed delivery time","length":4,"mandatory":false,"type":"N"},{"name":"IDEX","description":"Numerotation","length":5,"mandatory":false,"type":"A"},{"name":"TEST","description":"TEST","length":0,"mandatory":false,"type":"A"},{"name":"DSDT","description":"departure date","length":8,"mandatory":false,"type":"N"},{"name":"RODN","description":"route departure","length":3,"mandatory":false,"type":"N"},{"name":"DSHM","description":"departure time","length":4,"mandatory":false,"type":"N"},{"name":"IDWH","description":"Priorité dépôt","length":10,"mandatory":false,"type":"A"}],"inputFields":[{"name":"CUNO","description":"customer","length":10,"mandatory":true,"type":"A"},{"name":"ITNO","description":"item number","length":15,"mandatory":false,"type":"A"},{"name":"POP4","description":"Référence normalisée de l’article ","length":15,"mandatory":false,"type":"A"},{"name":"POP5","description":"Référence non normalisée de l’article ","length":15,"mandatory":false,"type":"A"},{"name":"CFI1","description":"Code marque (ACR ou partenaire) ","length":10,"mandatory":false,"type":"A"},{"name":"ORQA","description":"ordered quantity - alternate U/M","length":15,"mandatory":false,"type":"N"},{"name":"WHLO","description":"warehouse","length":3,"mandatory":false,"type":"A"},{"name":"ROUT","description":"route","length":6,"mandatory":false,"type":"A"},{"name":"SPLM","description":"supply model","length":8,"mandatory":false,"type":"A"},{"name":"PADL","description":"partial delivery","length":1,"mandatory":false,"type":"N"},{"name":"BCKO","description":"backorder","length":1,"mandatory":false,"type":"N"},{"name":"OALT","description":"Options de recherche d’alternative ","length":1,"mandatory":false,"type":"N"}],"utilities":[],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"40546a51-f21b-41dc-8029-58dc97c3458e":{"uuid":"40546a51-f21b-41dc-8029-58dc97c3458e","updated":1731667568299,"updatedBy":"KMOTEAN","created":1723064008023,"createdBy":"TMUNGUL","apiVersion":"0.21","beVersion":"16.0.0.20240916174523.6","language":"GROOVY","codeHash":"C125494514C6AE1F7BD0B997C7F4EC2087CF0E1BCF67B11D610512CF675DA762","code":""}}}